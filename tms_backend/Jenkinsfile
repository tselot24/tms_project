pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'tselot24/tms_back:latest'  // Docker Hub image
        DOCKER_REGISTRY = 'docker.io'  // Docker Hub registry
        DOCKER_CREDENTIALS_ID = 'tselot24_docker'  // Jenkins credentials ID
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Change branch name to 'main' if your default branch is 'main'
                    git branch: 'main', credentialsId: 'tselot24_github', url: 'git@github.com:tselot24/tms-api-main.git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t $DOCKER_IMAGE ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "$DOCKER_CREDENTIALS_ID",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        '''
                        echo "Docker login successful"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push $DOCKER_IMAGE"
                }
            }
        }

        stage('Deploy with Docker Swarm') {
            steps {
                script {
                    sh '''
                    docker stack rm tms_backend || true
                    docker stack deploy -c docker-compose.yml tms_backend
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            // Uncomment this to clean up unused Docker resources
            // sh 'docker system prune -f'
        }
    }
}

